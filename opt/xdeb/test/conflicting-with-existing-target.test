#!/usr/bin/env bash

# O Void Linux usa /bin/sh por padrÃ£o.

# Cria um pacote .deb com estrutura de diretÃ³rios simulando /usr/lib e /lib.

# Usa a ferramenta xdeb para convertÃª-lo ao formato Void Linux.

# Testa se o empacotamento e a fusÃ£o de diretÃ³rios (/lib â†’ /usr/lib) estÃ£o funcionando 
# corretamente.

# Usa mensagens internacionalizadas para facilitar traduÃ§Ã£o da saÃ­da.


# ðŸ“Ž Notas Adicionais

# O script nÃ£o define as funÃ§Ãµes fail nem as variÃ¡veis xdeb_path e XDEB_PKGROOT, entÃ£o 
# depende de contexto externo.

clear

# ----------------------------------------------------------------------------------------

# InternacionalizaÃ§Ã£o com gettext

export TEXTDOMAIN=xdeb
export TEXTDOMAINDIR=/usr/share/locale

# ----------------------------------------------------------------------------------------


function build() {

    # Cria dois diretÃ³rios:

    mkdir -p usr/lib/dir
    mkdir -p lib/dir

    touch usr/lib/dir/usr_lib_dir
    touch lib/dir/lib_dir

# Cria um arquivo control (metadados do pacote .deb) com nome, versÃ£o e descriÃ§Ã£o traduzÃ­veis via gettext.

    tee control >/dev/null <<EOF
Package: $(gettext "conflicting-with-existing-target")
Version: 0
Architecture: all
Maintainer: $(gettext "none")
Description: $(gettext "none")
EOF

    # Empacotamento:

    tar -cf control.tar control
    tar -cf data.tar */

    # Empacota os metadados e os arquivos simulados em um .deb chamado package.deb.

    ar -rc package.deb control.tar data.tar

}


# FunÃ§Ã£o run â€” testa se o pacote Ã© manipulado corretamente

function run() {

    # Executa o xdeb (ferramenta de conversÃ£o de pacotes .deb para o formato xbps do Void Linux), passando o .deb criado.

    # Se falhar, imprime "build failed" (traduzÃ­vel).

    "${xdeb_path}" -Sf package.deb || fail "$(gettext "build failed")"


    # VerificaÃ§Ã£o do conteÃºdo do pacote convertido:

    # Usa xbps-query para listar os arquivos contidos no pacote gerado.

    # Armazena os arquivos em files.

    files="$(xbps-query --repository="${XDEB_PKGROOT}/binpkgs" -f conflicting-with-existing-target 2>&1)"


    # Testes de consistÃªncia:

    # Verifica se os arquivos esperados estÃ£o no lugar certo.


    # Se /usr/lib/dir/usr_lib_dir nÃ£o estiver presente â†’ erro: o diretÃ³rio foi modificado indevidamente.

    echo "${files}" | grep "/usr/lib/dir/usr_lib_dir" >/dev/null 2>&1 || fail "$(gettext "old /usr/lib/dir modified")"


    # Se /lib/dir/lib_dir nÃ£o tiver sido movido ou fundido para /usr/lib/dir/ â†’ erro.

    echo "${files}" | grep "/usr/lib/dir/lib_dir" >/dev/null 2>&1 || fail "$(gettext "/lib/dir not merged with /usr/lib/dir")"
}


